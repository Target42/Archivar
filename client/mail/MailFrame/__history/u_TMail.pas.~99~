unit u_TMail;

interface

uses
  System.Classes, IdMessage, Vcl.Imaging.pngimage, Vcl.Graphics;

type
  TMail = class
    private
      FTitel: string;
      FAbsender: string;
      FSendDate: string;
      FSendTime: string;
      FAdresse: string;
      FKategorie: string;
      FMessage : TIdMessage;
      FTimeStamp: TDateTime;
      FAttachments: boolean;
      m_png : TPngImage;
      m_bmp : TBitmap;

      procedure processMailData;
      procedure SetKategorie( value : string );
    public
      constructor create;
      destructor Destroy;  override;

      property Titel: string read FTitel write FTitel;
      property Absender: string read FAbsender write FAbsender;
      property Adresse: string read FAdresse write FAdresse;
      property SendDate: string read FSendDate write FSendDate;
      property SendTime: string read FSendTime write FSendTime;
      property TimeStamp: TDateTime read FTimeStamp write FTimeStamp;
      property Attachments: boolean read FAttachments write FAttachments;
      property Attachment: TPngImage read m_png;

      property Kategorie: string read FKategorie write SetKategorie;
      property Katbmp : TBitmap read m_bmp;

      function loadFromFile( fname : string ) : boolean;
      function loadFromStream( st : TStream ) : boolean;
  end;

function LoadMail( fname : string ) : TMail;

implementation

uses
  System.SysUtils, System.Types;

{ TMail }

var
  kats : TStringList;

function LoadMail( fname : string ) : TMail;
begin
  Result := TMail.create;
  if not Result.loadFromFile(fname) then
    FreeAndNil(Result);
end;

constructor TMail.create;
begin
  FMessage      := TIdMessage.Create;
  FAttachments  := false;
  m_png         := TPngImage.Create;
  m_bmp         := TBitmap.Create;
  m_bmp.Width   := 16;
  m_bmp.Height  := 16;
end;

destructor TMail.Destroy;
begin
  m_png.Free;
  m_bmp.Free;
  FMessage.Free;
  inherited;
end;

function TMail.loadFromFile(fname: string): boolean;
begin
  Result := FileExists(fname);
  if Result then begin
    try
      FMessage.NoDecode := true;
      FMessage.LoadFromFile(fname);
      FMessage.ProcessHeaders;

      processMailData;
    except
      Result := false;
    end;
  end;
end;

function TMail.loadFromStream(st: TStream): boolean;
begin
  Result := false;

  try
    FMessage.LoadFromStream(st);
    FMessage.ProcessHeaders;

    processMailData;
    Result := true;
  except

  end;
end;

procedure TMail.processMailData;
begin
  FTitel    := FMessage.Subject;
  FAbsender := FMessage.From.Name;
  FSendDate := FormatDateTime( 'dddd dd.mm.yyyy', FMessage.Date );
  FSendTime := FormatDateTime('hh:nn', FMessage.Date);
  FAdresse  := FMessage.From.Address;
  FTimeStamp:= FMessage.Date;
  FAttachments := FMessage.MessageParts.AttachmentCount <> 0;

  if Trim(FTitel) = '' then
    FTitel := '(Kein Betreff)';

  m_bmp.Canvas.Brush.Color := clWindow;
  m_bmp.Canvas.FillRect( Rect( 0, 0, m_bmp.Width, m_bmp.Height));
end;

procedure TMail.SetKategorie(value: string);
var
  list : TStringList;
  segSize : integer;
  function getColor( name : string ) : TColor;
  var
    inx : integer;
  begin
    Result := clBlack;
    inx := list.IndexOfName(name);
    if inx <> -1 then begin
      Result := TColor(StrToInt(list.ValueFromIndex[inx]));
    end;
  end;
  procedure paintRect( re : TRect; name : string );
  begin
    m_bmp.Canvas.Brush.Color := getColor(name);
    m_bmp.Canvas.FillRect(re);
  end;
begin
  FKategorie := trim(value);
  if FKategorie.IsEmpty then exit;

  list := TStringList.Create;
  list.StrictDelimiter := true;
  list.Delimiter := ';';
  list.DelimitedText := FKategorie;

  case list.Count of
    1 : begin
      paintRect(Rect( 0, 0, 16, 16 ), list.Names[0]);
    end;
    2 : begin
      paintRect(Rect( 0, 0, 7, 16 ),  list.Names[0]);
      paintRect(Rect( 8, 0, 16, 16 ), list.Names[1]);
    end;
    3 : begin
      paintRect(Rect( 0, 0,  4, 16 ),   list.Names[0]);
      paintRect(Rect( 5, 0,  10, 16 ),  list.Names[1]);
      paintRect(Rect( 11, 0, 16, 16 ),  list.Names[2]);
    end;
    4 : begin
      paintRect(Rect( 0, 0, 3, 16 ),   list.Names[0]);
      paintRect(Rect( 4, 0, 7, 16 ),   list.Names[1]);
      paintRect(Rect( 8, 0, 11, 16 ),  list.Names[2]);
      paintRect(Rect( 12, 0, 16, 16 ), list.Names[3]);
    end;
  end;
  list.Free;

end;

initialization
  kats := TStringList.Create;
  kats.AddPair('PSA',   '$FF0000');
  kats.AddPair('EGA',   '$00FF00');
  kats.AddPair('BER',   '$0000FF');
  kats.AddPair('OFFEN', '$FF0F0F');

finalization
  kats.Free;
end.

